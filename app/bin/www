#!/usr/bin/env node

/* jshint node: true */
"use strict";

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('oneframe:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
var path = require('path');

/**
 * Create HTTP server.
 */

var server = http.createServer(function(req, res) {
    res.writeHead(301, {
        "Location": "https://" + req.headers.host + req.url
    });
    res.end();
});
server.listen(3000);
server.on('error', onError);
server.on('listening', onListening);

var httpsServer = https.createServer({
    key: fs.readFileSync(path.join(__dirname, '..', 'certs', 'privkey.pem')),
    cert: fs.readFileSync(path.join(__dirname, '..', 'certs', 'cert.pem'))
}, app);
httpsServer.listen(3001);
httpsServer.on('error', onError);
httpsServer.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error('Binding to the port requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error('Port is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
}